#!/bin/bash
source lib.tegetype.sh
set -eEu -o pipefail

data_dir=$BASE_DIR/data

usage () {
    echo "Use: $(basename $0) [-m <max_frag_size>] <lib_name> <ref_name> <lib_file>" >&2
}

max_frag_size=1000
OPTIND=1
while getopts "m:" OPT "$@"; do
    case $OPT in
	m)
	    max_frag_size=$OPTARG
	    ([[ "$max_frag_size" =~ ^[[:digit:]]*$ ]] && [ $max_frag_size -gt 0 ]) ||
	    crash "invalid max_frag_size [$max_frag_size]"
	    ;;
    esac
done
shift $(($OPTIND - 1))

if [ $# -ne 3 ]; then
    usage
    exit
fi

[[ "$1" =~ ^[[:alnum:]_-]*$ ]] || crash "illegal character in library name [$1]"

set_ref_var_names "$2"
check_files_readable "$ref_fa" "$ref_fai" "$3"

set_lib_var_names $1
check_files_not_exist "$lib_settings_sh" "$lib_csv" "$lib_fa" \
    "$lib_bt2_idx".{{1..4},rev.{1,2}}.bt2


# check individual library entries
tawk -v ref_fai="$ref_fai" <"$3" \
'
BEGIN {
  while ((getline < ref_fai) > 0) {
    len[$1] = $2;
  }
}

{
  err = 1;
  if (!($1 in len)) {
    print "contig [" $1 "] not found in index" >"/dev/stderr";
  } else if ($4!="." && !($2>=0 && $2<=$3 && $3<=len[$1])) {
    print "invalid tsd1:" >"/dev/stderr";
  } else if ($4!="." && !($4>=0 && $4<=$5 && $5<=len[$1] && $3<=$4)) {
    print "invalid tsd2:" >"/dev/stderr";
  } else if (!match($6, /^[ACGTacgtNnXx]*$/) > 0) {
    print "invalid seq:" >"/dev/stderr";
  } else {
    err = 0;
  }

  if (err > 0) {
    print >"/dev/stderr";
    exit(1);
  }
}
'
make_note "individual library entries look ok"


# check deletions not overlapping
tmp=$(tawk '$4!="." {print $1, $2, $5}' <"$3" | self-intersect-count | tawk '$NF!=1')
if [ "$tmp" ]; then
    echo "$tmp"
    make_note "found overlapping deletions";
else
    make_note "no overlapping deletions"
fi


# check insertions not within 100bp of each other
tmp=$(tawk '$4=="." {st=$2; end=$3; if (end<st) {st=$3;end=$2}; print $1, st, end}' <"$3" | self-intersect-count -e 100 | tawk '$NF!=1')
if [ "$tmp" ]; then
    echo "$tmp"
    make_note "found nearby insertions"
else
    make_note "no nearby insertions"
fi


# create settings file
{
    echo "ref_name=$2"
    echo "max_frag_size=$max_frag_size"
} >$lib_settings_sh


# create csv & fa files
tawk -v lib_name=$1 -v max_frag_size=$max_frag_size -v lib_fa="$lib_fa" \
    -v ref_fa="$ref_fa" -v ref_fai="$ref_fai" \
    <"$3" >"$lib_csv" 2>/dev/null \
'
BEGIN {
  while ((getline < ref_fai) > 0) {
    len[$1] = $2;
  }
}

{
  id = lib_name "_" NR;

  rest = $7;
  for (i=8; i<=NF; ++i) rest = rest "\t" $i;

  if ($4!=".") {

    ref_left_reg_start = $2 - max_frag_size;
    if (ref_left_reg_start<0) ref_left_reg_start = 0;
    left_reg_len = $2 - ref_left_reg_start;

    ref_right_reg_end = $5 + max_frag_size;
    if (ref_right_reg_end > len[$1]) ref_right_reg_end = len[$1];
    right_reg_len = ref_right_reg_end - $5;

    alt_left_reg_start = 0;
    alt_tsd1_start = alt_left_reg_start + left_reg_len;
    alt_tsd1_end = alt_tsd1_start + ($3 - $2);
    alt_right_reg_end = alt_tsd1_end + right_reg_len;

    print id, $1, ref_left_reg_start, ref_right_reg_end, $2, $3, $4, $5, id, alt_left_reg_start, alt_right_reg_end, alt_tsd1_start, alt_tsd1_end, ".", ".", rest;

    print ">" id >> lib_fa;
    print ">" id >"/dev/stderr";

    cmd = "samtools faidx " ref_fa " " $1 ":" ref_left_reg_start+1 "-" $3 " | tail -n +2 >>" lib_fa;
    system(cmd);
    print cmd >"/dev/stderr";

    cmd = "samtools faidx " ref_fa " " $1 ":" $5+1 "-" ref_right_reg_end " | tail -n +2 >>" lib_fa;
    system(cmd);
    print cmd >"/dev/stderr";

  } else if ($4=="." && $3<=$2) {

    ref_left_reg_start = $3 - max_frag_size;
    if (ref_left_reg_start<0) ref_left_reg_start = 0;
    left_reg_len = $3 - ref_left_reg_start;

    ref_right_reg_end = $2 + max_frag_size;
    if (ref_right_reg_end > len[$1]) ref_right_reg_end = len[$1];
    right_reg_len = ref_right_reg_end - $2;

    alt_left_reg_start = 0;
    alt_tsd1_start = alt_left_reg_start + left_reg_len;
    alt_tsd1_end = alt_tsd1_start + ($2 - $3);
    alt_tsd2_start = alt_tsd1_end + length($6);
    alt_tsd2_end = alt_tsd2_start + ($2 - $3);
    alt_right_reg_end = alt_tsd2_end + right_reg_len;

    print id, $1, ref_left_reg_start, ref_right_reg_end, $3, $2, ".", ".", id, alt_left_reg_start, alt_right_reg_end, alt_tsd1_start, alt_tsd1_end, alt_tsd2_start, alt_tsd2_end, rest;

    print ">" id >> lib_fa;
    print ">" id >"/dev/stderr";

    cmd = "samtools faidx " ref_fa " " $1 ":" ref_left_reg_start+1 "-" $2 " | tail -n +2 >>" lib_fa;
    system(cmd);
    print cmd >"/dev/stderr";

    print $6 >> lib_fa;
    print "print seq >>" lib_fa >"/dev/stderr";

    cmd = "samtools faidx " ref_fa " " $1 ":" $3+1 "-" ref_right_reg_end " | tail -n +2 >>" lib_fa;
    system(cmd);
    print cmd >"/dev/stderr";

  } else if ($4=="." && $2<$3) {

    ref_left_reg_start = $2 - max_frag_size;
    if (ref_left_reg_start<0) ref_left_reg_start = 0;
    left_reg_len = $2 - ref_left_reg_start;

    ref_right_reg_end = $3 + max_frag_size;
    if (ref_right_reg_end > len[$1]) ref_right_reg_end = len[$1];
    right_reg_len = ref_right_reg_end - $3;

    alt_left_reg_start = 0;
    alt_tsd1_start = alt_left_reg_start + left_reg_len;
    alt_tsd1_end = alt_tsd1_start;
    alt_tsd2_start = alt_tsd1_end + length($6);
    alt_tsd2_end = alt_tsd2_start;
    alt_right_reg_end = alt_tsd2_end + right_reg_len;

    print id, $1, ref_left_reg_start, ref_right_reg_end, $2, $3, ".", ".", id, alt_left_reg_start, alt_right_reg_end, alt_tsd1_start, alt_tsd1_end, alt_tsd2_start, alt_tsd2_end, rest;

    print ">" id >> lib_fa;
    print ">" id >"/dev/stderr";

    cmd = "samtools faidx " ref_fa " " $1 ":" ref_left_reg_start+1 "-" $2 " | tail -n +2 >>" lib_fa;
    system(cmd);
    print cmd >"/dev/stderr";

    print $6 >> lib_fa;
    print "print seq >>" lib_fa >"/dev/stderr";

    cmd = "samtools faidx " ref_fa " " $1 ":" $3+1 "-" ref_right_reg_end " | tail -n +2 >>" lib_fa;
    system(cmd);
    print cmd >"/dev/stderr";

  }
}
'

# create bowtie2 index
bowtie2-build "$lib_fa" "$lib_bt2_idx"


make_note "added reference [$1]"
