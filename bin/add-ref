#!/bin/bash
source lib.tegetype.sh
set -eEu -o pipefail

data_dir=$BASE_DIR/data

usage () {
    echo "Use: $(basename $0) -f <ref.fa> -g <gc5_file> <ref_name>"
}

cl_ref_fa=
cl_ref_gc5=
OPTIND=1
while getopts "f:g:" OPT "$@"; do
    case $OPT in
	f)
	    cl_ref_fa=$OPTARG
	    ;;
	g)
	    cl_ref_gc5=$OPTARG
	    ;;
    esac
done
shift $(($OPTIND - 1))

if [ $# -ne 1 ]; then
    usage >&2
    exit
fi

[[ "$1" =~ ^[[:alnum:]_-]*$ ]] || crash "illegal character in reference name [$1]"
[ ! "$cl_ref_fa" ] || check_files_readable "$cl_ref_fa"
[ ! "$cl_ref_gc5" ] || check_files_readable "$cl_ref_gc5"

ref_name=$1
set_ref_var_names $ref_name

# add fasta
if [ -r "$ref_fa" ]; then
    echo "file exists [$ref_fa]; to regenerate it, remove it, then rerun setup"
else
    [ "$cl_ref_fa" ] || crash "reference fasta file must be given"
    find_my_name_and_dir "$cl_ref_fa"
    ln -s "$MY_DIR/$MY_NAME" "$ref_fa"
    make_note "using fasta file [$cl_ref_fa]"
fi

# add fasta index
if [ -r "$ref_fai" ]; then
    echo "file exists [$ref_fai]; to regenerate it, remove it, then rerun setup"
else
    if [ "$cl_ref_fa" ]; then
	find_my_name_and_dir "$cl_ref_fa"
	if [ -r "$MY_DIR/$MY_NAME".fai ]; then
	    make_note "using existing faidx file [$MY_DIR/$MY_NAME.fai]"
	    ln -s "$MY_DIR/$MY_NAME".fai "$ref_fai"
	fi
    fi
    if [ ! -r "$ref_fai" ]; then
	make_note "generating faidx file"
	samtools faidx "$ref_fa"
    fi
fi

# add gc5 file
if [ -r "$ref_gc5" ]; then
    echo "file exists [$ref_gc5]; to regenerate it, remove it, then rerun setup"
else
    [ "$cl_ref_gc5" ] || crash "reference gc5 file must be given"
    find_my_name_and_dir "$cl_ref_gc5"
    ln -s "$MY_DIR/$MY_NAME" "$ref_gc5"
    make_note "using gc5 file [$cl_ref_gc5]"
fi

# add male-determining region
if [ -r "$ref_settings_sh" ]; then
    echo "file exists [$ref_settings_sh]; to regenerate it, remove it, then rerun setup"
else
    read -er -p 'Enter male-determining region (e.g. in hg19 this is chrY:2654895-2655791): ' in_male_reg
    ref_male_chr=${in_male_reg%%:*}
    ref_male_reg=${in_male_reg#*:}
    ref_male_reg_start=${ref_male_reg%%-*}
    ref_male_reg_end=${ref_male_reg#*-}
    [ "$in_male_reg" = "$ref_male_chr:$ref_male_reg_start-$ref_male_reg_end" ] ||
    crash "could not parse region: $ref_male_chr"
    grep -q '^'"$ref_male_chr"'	' "$ref_fai" ||
    crash "male chromosome not found in index: $ref_male_chr"
    [[ "$ref_reg_start" =~ ^[[:digit:]]*$ ]] ||
    crash "male region start contains non-digits"
    [[ "$ref_reg_end" =~ ^[[:digit:]]*$ ]] ||
    crash "male region end contains non-digits"
    make_note "male-determining region: $ref_male_chr:$ref_male_reg"
    echo "ref_male_chr=$ref_male_chr" >"$ref_settings_sh"
    echo "ref_male_reg=$ref_male_reg" >>"$ref_settings_sh"
fi

make_note "added reference [$1]"
