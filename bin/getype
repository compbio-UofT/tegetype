#!/bin/bash
[ "$BASE_DIR" ] ||
{
    echo "run this script through tegetype wrapper" >&2
    exit 1
}
source lib.tegetype.sh
set -eEu -o pipefail

usage () {
    echo "Use: $(basename $0) <ngs_name> <lib_name>"
}

if [ $# -ne 2 ]; then
    usage >&2
    exit
fi

ngs_name=$1
lib_name=$2
set_lib_var_names "$2"
check_files_readable "$lib_settings_sh" "$lib_csv" "$lib_fa" \
    "$lib_bt2_idx".{{1..4},rev.{1,2}}.bt2
set_ref_var_names $ref_name
check_files_readable "$ref_fa" "$ref_fai"


#
# don't trust the user; check most settings
#
(cmd_exists python && [ "$(python --version 2>&1 | cut -d '.' -f 2)" -ge 6 ]) ||
crash "python2.6+ not found"
cmd_exists samtools || crash "samtools not found"
cmd_exists bedtools || crash "bedtools not found"
cmd_exists bowtie2 || crash "bowtie2 not found"


make_note "using NCPU=$NCPU"
START_STAGE=${START_STAGE:-0}
END_STAGE=${END_STAGE:-100}
make_note "using START_STAGE=$START_STAGE and END_STAGE=$END_STAGE"
export MAX_NM=${MAX_NM:-20}
make_note "using MAX_NM=$MAX_NM"
export MIN_MQV=${MIN_MQV:-0}
make_note "using MIN_MQV=$MIN_MQV"


need_mappings () {
    [ $START_STAGE -le 3 ]
}

need_sorted_mappings () {
    [ $START_STAGE -le 3 ]
}

get_mappings_by_read_name() {
    file=${orig_mappings[$1]}
    [ -r $file ] || crash "$file: file not found"
    rg=${orig_read_groups[$1]:-}
    command="$PV $file"
    if (set +o pipefail; zc $file | head -n 1 | cut -c -3 | grep -q "BAM"); then
	command="$command | samtools view -h -"
    elif (set +o pipefail; file $file | grep -q gzip); then
	command="$command | $UNZIP"
    fi
    if [ ${DROP_PAIRS_DIFF_CHR:-} ]; then
	command="$command | tawk 'substr(\$1,1,1)==\"@\" || and(\$2,0x1)==0 || and(\$2,0x4)==1 || and(\$2,0x8)==1 || \$7==\"=\"'" 
    fi
    if [ ${add_dummy_pairs:-} ]; then
	command="$command | add-dummy-pairs"
    fi
    if (set +o pipefail; zc $file | head -n 1 | grep -q "coordinate") || [ "${RSORT:-}" ]; then
	command="$command | sam-rsort"
    fi
    make_note "command to get mappings: $command"
#    (set +e +o pipefail; eval $command | add-default-rg $rg || true)
    eval $command | add-default-rg $rg
}


ORIG_MAPPINGS=${ORIG_MAPPINGS:-}
if need_mappings; then
    # need original mappings
    ORIG_MAPPINGS=${ORIG_MAPPINGS:-*.sort.bam}
    make_note "using mapping file(s): [$ORIG_MAPPINGS]"
    ls $ORIG_MAPPINGS >/dev/null 2>&1 || crash "could not find mappings"
    orig_mappings=($(ls $ORIG_MAPPINGS))

    make_note "using reads group(s): [${ORIG_READ_GROUPS:-}]"
    orig_read_groups=($(echo ${ORIG_READ_GROUPS:-}))

    make_note "dropping pairs mapped to different chromosomes: $(([ ${DROP_PAIRS_DIFF_CHR:-} ] && echo "yes") || echo "no")"
fi

if need_sorted_mappings; then
    sorted_mappings=()
    for f in ${orig_mappings[@]}; do
	if (set +o pipefail; zc $f | head -n 1 | grep -q "coordinate"); then
	    make_note "$f: sorted"
	    sorted_mappings+=($f)
	else
	    make_note "$f: must sort"
	    {
		if (set +o pipefail; zc $f | head -n 1 | cut -c -3 | grep -q "BAM"); then
		    exec samtools reheader <(samtools view -H $f | sam-set-sorted-header) $f
		else
		    {
			sam-header $f | sam-set-sorted-header
			exec sam-body $f
		    } | samtools view -Su -
		fi
	    } | samtools sort -m 10000000000 - $(basename $f).sort
	    samtools index $(basename $f).sort.bam
	    sorted_mappings+=($(basename $f).sort.bam)
	fi
    done

    # check largest chromosome size; build chr maps
    largest_chr_idx=$(set +o pipefail; sort -k 2,2nr "$ref_fai" | head -n 1 | cut -f 2)
    for f in ${sorted_mappings[@]}; do
	largest_chr_file=$(set +o pipefail; samtools view -H $f | sam-get-fai | sort -k 2,2nr | head -n 1 | cut -f 2)
	[ "$largest_chr_idx" = "$largest_chr_file" ] ||
	crash "largest chr in file [$f] different than the one in index"
	# if map doesn't exist, create it
	[ -r $(basename $f).chr_map ] ||
	join -j 2 -t "	" \
	    <(sort -k 2,2 $ref_fai | cut -f 1,2) \
	    <(samtools view -H $f | sam-get-fai | sort -k 2,2) |
	sort -k 1,1nr |
	cut -f 2,3 >$(basename $f).chr_map
    done
fi


#
# Stage 1: detect pairing information in mappings
#
STAGE_NUM=1
STAGE_NAME="detect pairing information"
pairing_file=$ngs_name.$ref_name.pairing
INPUT_FILES="$ORIG_MAPPINGS"
OUTPUT_FILES="$pairing_file"
stage_command () {
    rm -f $pairing_file.tmp
    i=0
    while [ $i -lt ${#orig_mappings[@]} ]; do
	no_sigpipe get_mappings_by_read_name $i | detect-pairing -f >>$pairing_file.tmp
	let i+=1
    done
    sed 's/\(^.*stddev=\([0-9]*\),.*$\)/\1\t\2/' <$pairing_file.tmp |
    sort -s -k 1,1 -k 4,4n |
    cut -f 1-3 |
    tawk 'BEGIN{last=""} {if ($1!=last) print; last=$1}' >$pairing_file.tmp.uniq
    tawk -v n=$(wc -l <$pairing_file.tmp.uniq) \
	'{$2=NR-1; while (length($2)<length(n-1)) $2="0" $2; print}' \
	<$pairing_file.tmp.uniq >$pairing_file
}
run_stage

grep -q "paired=" $pairing_file || crash "could not determine pairing information"


#
# Stage 2: Sort mappings, if necessary
#
STAGE_NUM=2
STAGE_NAME="sort mappings if necessary"
INPUT_FILES="$ORIG_MAPPINGS"
OUTPUT_FILES=
stage_command () {
    for file in ${orig_mappings[@]}; do
	if (set +o pipefail; zc $file | head -n 1 | grep -q "coordinate"); then
	    make_note "$file: sorted"
	else
	    make_note "$file: must sort"
	    samtools sort -m 10000000000 $file $(basename $file).sort
	fi
    done
}
run_stage

sorted_mappings=()
if need_sorted_mappings; then
    for file in ${orig_mappings[@]}; do
	if (set +o pipefail; zc $file | head -n 1 | grep -q "coordinate"); then
	    sorted_mappings+=($file)
	else
	    sorted_mappings+=($(basename $file).sort.bam)
	fi
    done
fi


#
# Stage 3: Extract discordant reads and rename them
#
# Input: mappings, reads
# Output: reads unmapped and reads mapped unpaired
#
STAGE_NUM=3
STAGE_NAME="extract discordant reads"
reads_to_remap=$ngs_name.$ref_name.reads.to_remap
INPUT_FILES="$ORIG_MAPPINGS"
OUTPUT_FILES=$(for rg in $(cut -f 1 $pairing_file); do echo "$reads_to_remap.$rg."{1,2}".fq.gz"; done)
stage_command () {
    i=0
    while [ $i -lt ${#orig_mappings[@]} ]; do
	add_dummy_pairs=1 get_mappings_by_read_name $i |
	add-extra-sam-flags -N 4 -l $pairing_file |
	filter-concordant -N 4 -l $pairing_file 3>&1 >/dev/null |
	sam-to-fq -s -l $pairing_file
	let i+=1
    done |
    fq-trim-illumina-reads -v input_phred=33 |
    fq-remove-short-paired-reads |
    fq-rename-paired-reads-with-len -v ofq=tfq |
    tawk '{split($1,a,":"); print a[1] "." a[3], $0;}' |
    split-file-by-field -r --prefix $reads_to_remap. --suffix .fq.gz \
	--cmd "fq-convert -v ofq=fq | gzip -9" \
	-d <(tawk '{print $2 ".1", $1 ".1"; print $2 ".2", $1 ".2";}' <$pairing_file)
}
run_stage


#
# Stage 4: Mapping to collection of alternate alleles
#
# Input: reads to remap
# Output: mappings to alternate alleles
#
STAGE_NUM=4
STAGE_NAME="mapping to alternate alleles"
mappings_to_alt=$ngs_name.$lib_name.map.to_ref+alt_lib
INPUT_FILES=$(for rg in $(cut -f 1 $pairing_file); do echo "$reads_to_remap.$rg."{1,2}".fq.gz"; done)
OUTPUT_FILES=$(for rg in $(cut -f 1 $pairing_file); do echo "$mappings_to_alt.$rg.bam"; done)
stage_command () {
    while read -r -a line; do
	make_note "remapping read group [${line[0]}]"
	$PV $reads_to_remap.${line[0]}.1.fq.gz | zc |
	bowtie2 -x $lib_bt2_idx -p $NCPU --phred33 --quiet \
	    -1 - \
	    -2 <(zc $reads_to_remap.${line[0]}.2.fq.gz) \
	    $(get-bowtie-pairing -p "${line[2]}") --rg-id ${line[0]} |
	samtools view -Sb - >$mappings_to_alt.${line[0]}.bam
    done <$pairing_file
}
run_stage


#
# Stage 5: Sort alternate mappings
#
# Input: mappings to alternate alleles
# Output: single file, sorted
#
STAGE_NUM=5
STAGE_NAME="sort alternate mappings"
mappings_to_alt_sort=$mappings_to_alt.merge.sort
INPUT_FILES=$(for rg in $(cut -f 1 $pairing_file); do echo "$mappings_to_alt.$rg.bam"; done)
OUTPUT_FILES="$mappings_to_alt_sort.bam"
stage_command () {
    samtools merge -u -h <(bam-merge-rg-headers $INPUT_FILES) - $INPUT_FILES |
    samtools sort -m 10000000000 - $mappings_to_alt_sort.bam
    samtools index $mappings_to_alt_sort.bam
}
run_stage


#
# Stage 6: Genotype reference allele
#
STAGE_NUM=6
STAGE_NAME="gather evidence for reference allele"
ref_evidence=$ngs_name.$lib_name.ref-evidence
INPUT_FILES="${sorted_mappings[@]:-} $mappings_to_alt_sort.bam"
OUTPUT_FILES=$ref_evidence.csv
stage_command () {
    rm -f $ref_evidence.csv $ref_evidence.log
    while read -r -a line; do
	make_note "processing: ${line[@]:0:15}" 2>&1 | tee -a $ref_evidence.log >&2
	{
	    for f in ${sorted_mappings[@]}; do
		local_chr_name=$(tawk "\$1==\"${line[1]}\"" \
		    <$(basename $f).chr_map | cut -f 2)
		[ "$local_chr_name" ] || continue
		samtools view $f \
		    $local_chr_name:$((${line[2]} + 1))-${line[3]}
	    done
	    samtools view $mappings_to_alt_sort.bam \
		${line[1]}:$((${line[2]} + 1))-${line[3]}
	} |
	sam-filter-nm 3>>$ref_evidence.log |
	add-dummy-pairs |
	sam-rsort 2> >(grep -v "some paired reads" >&2) |
	add-extra-sam-flags -N 4 -l $pairing_file |
	filter-concordant -N 4 -l $pairing_file 3>/dev/null |
	get-te-evidence -l $pairing_file -q $MIN_MQV -v \
	    -t ${line[4]},${line[5]} -t ${line[6]},${line[7]} \
	    -s $((${line[2]} + 1)),${line[3]} \
	    >>$ref_evidence.csv 2>>$ref_evidence.log
    done <$lib_csv
}
run_stage


#
# Stage 7: Genotype alternate allele
#
STAGE_NUM=7
STAGE_NAME="gather evidence for alternate allele"
alt_evidence=$ngs_name.$lib_name.alt-evidence
INPUT_FILES=$mappings_to_alt_sort.bam
OUTPUT_FILES=$alt_evidence.csv
stage_command () {
    rm -f $alt_evidence.csv $alt_evidence.log
    while read -r -a line; do
	make_note "processing: ${line[@]:0:15}" 2>&1 | tee -a $alt_evidence.log >&2
	samtools view $mappings_to_alt_sort.bam \
	    ${line[8]}:$((${line[9]} + 1))-${line[10]} |
	sam-filter-nm 3>>$alt_evidence.log |
	sam-rsort --cid-parser cid_parser 2> >(grep -v "some paired reads" >&2) |
	add-extra-sam-flags -N 4 -P -l $pairing_file |
	filter-concordant -N 4 -P -l $pairing_file 3>/dev/null |
	get-te-evidence -P -l $pairing_file -q $MIN_MQV -v \
	    -t ${line[11]},${line[12]} -t ${line[13]},${line[14]} \
	    -s $((${line[9]} + 1)),${line[10]} \
	    >>$alt_evidence.csv 2>>$alt_evidence.log
    done <$lib_csv
}
run_stage
